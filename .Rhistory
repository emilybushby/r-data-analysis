## Create new dataframe from surveys that contains:
## species_id coloumn and a new coloumn called hindfood_half containinghalf of the values from the hindfoot_length coloumn
## all the values in hindfoot_half should be less than 30
challenge_one <-
surveys %>%
mutate(hindfoot_half = hindfoot_length/2) %>%
select(species_id, hindfoot_half) %>%
filter(hindfoot_half<30)
challenge_one
## How to remove missing observations
surveys %>%
mutate(weight_kg = weight/1000) %>%
select(starts_with("w")) %>%
filter(is.na(weight))
## How to remove missing observations
surveys %>%
mutate(weight_kg = weight/1000) %>%
select(starts_with("w")) %>%
filter(!is.na(weight)) ## filters out rows in coloumn weight that are not NA. Removing "!" will show you all the NAs
summary(surveys)
## How to get a summary overview of a dataset
table(surveys)
## How to get a summary overview of a dataset
table(surveys$year)
length(table(surveys$year))
range(surveys$year)
summary(surveys)
## Splitting and running calulations on groups
surveys %>%
group_by(year) %>%
summarise(mean_hindfoot_length = mean(hindfoot_length))
## Splitting and running calulations on groups
surveys %>%
group_by(year) %>%
summarise(mean_hindfoot_length = mean(hindfoot_length,
na.rm = TRUE))
surveys %>%
group(sex, species_id)
surveys %>%
group_by(sex, species_id)
surveys %>%
filter(!is.na(weight)) %>%
group_by(sex, species_id) %>%
summarise(mean_weight = mean(weight))
surveys %>%
filter(!is.na(weight)) %>%
group_by(sex, species_id) %>%
summarise(mean_weight = mean(weight),
min_weight = min(weight))
surveys %>%
filter(!is.na(weight)) %>%
group_by(sex, species_id) %>%
summarise(mean_weight = mean(weight),
min_weight = min(weight),
sd_weight = sd(weight))
surveys %>%
count(sex)
surveys %>%
count(sex, species)
surveys %>%
count(sex, species) %>%
print(n=81)
surveys %>%
count(sex, species) %>%
print(n = 81)
surveys %>%
count(sex, species) %>%
print(n = 81)
surverys %>%
count(species, sort = TRUE)
surverys %>%
count(species, sort = TRUE)
surveys %>%
count(species, sort = TRUE)
## arrange - used to arrange rows
surveys %>%
count(sex, species) %>%
arrange(species, desc(n))
## CHALLENGE 2 ##
## How many individuals were caught in each plot_type
surveys %>%
summarise(plot_type)
## CHALLENGE 2 ##
## How many individuals were caught in each plot_type
surveys %>%
summarise(a=plot_type)
## CHALLENGE 2 ##
## How many individuals were caught in each plot_type
surveys %>%
count(plot_type)
## CHALLENGE 2 ##
## How many individuals were caught in each plot_type. Answer in 2 ways (using group_by and count)
surveys %>%
count(plot_type)
surveys %>%
group_by(plot_type)
## CHALLENGE 2 ##
## How many individuals were caught in each plot_type. Answer in 2 ways (using group_by and count)
surveys %>%
group_by(plot_type) %>%
count(plot_type)
surveys %>%
count(plot_type)
surveys %>%
group_by(plot_type)
surveys %>%
count(group_by(plot_type))
surveys %>%
group_by(plot_type) %>%
n(,)
surveys %>%
group_by(plot_type) %>%
n(plot_type)
surveys %>%
group_by(plot_type) %>%
n( ,plot_type)
surveys %>%
group_by(plot_type) %>%
tally()
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
filter(!is.na(year, genus, species_id, weight)) %>%
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
arrange(species_id, year, genus, weight, desc(n)) %>%
filter(!is.na(year, genus, species_id, weight))
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
arrange(species_id, year, genus, weight, desc(n)) %>%
filter(!is.na(weight))
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
arrange(species_id, year, genus, weight, desc(n))
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
arrange(year, desc(n))
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
arrange(year, desc(n))  %>%
filter(!is.na(year, genus, species_id, weight))
surveys %>%
count(species, sort = TRUE)
surveys %>%
count(species_id, year, genus, weight, sort = TRUE)
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
group_by(year, genus, species_id, weight) %>%
summarise(max_weight_year = max(weight, na.rm = TRUE))
?na.rm
??na.rm
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
group_by(year) %>%
summarise(max_weight_year = max(weight, na.rm = TRUE))
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
group_by(year) %>%
summarise(max_weight_year = max(weight, na.rm = TRUE)) %>%
select(year, genus, species_id, weight, max_weight_year)
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
filter(!is.na(weight)) %>%
group_by(year) %>%
summarise(max_weight_year = max(weight, na.rm = TRUE))
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
filter(!is.na(weight)) %>%
group_by(year) %>%
summarise(max_weight_year = max(weight, na.rm = TRUE)) %>%
arrange(desc(max_weight_year))
surveys %>%
filter(!is.na(weight)) %>%
group_by(year) %>%
filter(weight = max(weight)) %>%
select(year, genus, species_id, weight)
surveys %>%
filter(!is.na(weight)) %>%
group_by(year) %>%
filter(weight == max(weight)) %>%
select(year, genus, species_id, weight)
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
filter(!is.na(weight)) %>%
group_by(year) %>%
filter(weight == max(weight)) %>%
select(year, genus, species_id, weight) %>%
arrange(weight)
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
filter(!is.na(weight)) %>%
group_by(year) %>%
filter(weight == max(weight)) %>%
select(year, genus, species_id, weight) %>%
arrange(desc(weight))
surveys_complete <- surveys %>%
filter(!is.na(weight)
!is.na(hindfoot_length),
!is.na(sex))
surveys_complete <-
surveys %>%
filter(!is.na(weight)
!is.na(hindfoot_length),
!is.na(sex))
filter(!is.na(weight, hindfoot_length,sex)
surveys_complete <-
surveys %>%
filter(!is.na(weight, hindfoot_length,sex))
surveys_complete <-
surveys %>%
filter(!is.na(weight),
!is.na(hindfoot_length),
!is.na(sex))
species_counts <- surveys_complete %>%
count(species_id) %>%
filter(n>=50)
##CHALLENGE 4 ##
## Reduce the surveys_complete object so that it only contains species with at least 50 observations
## (these species are in object species_counts)
surveys_complete <-
surveys_complete %>%
filter(species_id %in% species_counts %in% species_counts$species_id)
View(surveys_complete)
##CHALLENGE 4 ##
## Reduce the surveys_complete object so that it only contains species with at least 50 observations
## (these species are in object species_counts)
surveys_complete <-
surveys_complete %>%
filter(species_id %in% species_counts$species_id)
##CHALLENGE 4 ##
## Reduce the surveys_complete object so that it only contains species with at least 50 observations
## (these species are in object species_counts)
surveys_complete <-
surveys_complete %>%
filter(species_id%in%species_counts$species_id)
##CHALLENGE 4 ##
## Reduce the surveys_complete object so that it only contains species with at least 50 observations
## (these species are in object species_counts)
surveys_complete <-
surveys_complete %>%
filter(species_id %in% species_counts$species_id)
View(surveys_complete)
## Reduce the surveys_complete object so that it only contains species with at least 50 observations
## (these species are in object species_counts)
surveys_complete <-
surveys_complete %>%
filter(species_id %in% species_counts$species_id)
## Keep the species for which there are more than 50 observations
surveys_complete <-
surveys %>%
filter(!is.na(weight),
!is.na(hindfoot_length),
!is.na(sex))
species_counts <- surveys_complete %>%
count(species_id) %>%
filter(n>=50)
## Reduce the surveys_complete object so that it only contains species with at least 50 observations
## (these species are in object species_counts)
surveys_complete <-
surveys_complete %>%
filter(species_id %in% species_counts$species_id)
View(surveys_complete)
%in%
?%in%
? %in%
dim(surveys_complete)
write_csv(surveys_complete, "data/surveys_complete.csv")
write_csv(surveys_complete, "data/surveys_complete.csv")
### How to plot with ggplot ###
ggplot(data = surveys_complete)
### How to plot with ggplot ###
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfood_length))
### How to plot with ggplot ###
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))
### How to plot with ggplot ###
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) + geom_point()
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) + geom_point() + col(pink)
surveys_plot <- ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))
surveys_plot  + geom_point()
surveys_plot + geom_point() + colours(red)
surveys_complete %>%
count(species_id)
surveys_complete %>%
count(species_id)
## Analysing data
## Installing tidyverse
install.packages("tidyverse")
library("tidyverse")
surveys <- read_csv("data /portal_data_joined.csv")
head(surveys)
colnames(surveys)
## Use square bracket substetting to select rows from 1978 only
surveys[surveys$year=="1978", ]
## do the same using dplyr and filter (filter - used to select rows)
filter(surveys, year == 1978)
## select - used to select coloumns
select(surveys, year, plot_id, species_id)
## select only the three coloumns above but only from 1978
surveys_filtered <- filter(surveys, year=="1978")
select(surveys_filtered, year, plot_id, species_id)
## Stiching together with a pipe
## pipe symbol is %>%  (shift + control + m)
surveys_pipe <-
surveys %>%
filter(year ==1978) %>%
select(year, plot_id, species_id)
## mutate - to create new coloumns based on existing coloumns or on some oporations done on existing coloumns
surveys %>%
select(weight, species)
surveys %>%
mutate(weight_kg = weight/1000) %>%
select(starts_with("w"))
## CHALLENGE 1 ##
## Create new dataframe from surveys that contains:
## species_id coloumn and a new coloumn called hindfood_half containinghalf of the values from the hindfoot_length coloumn
## all the values in hindfoot_half should be less than 30
challenge_one <-
surveys %>%
mutate(hindfoot_half = hindfoot_length/2) %>%
select(species_id, hindfoot_half) %>%
filter(hindfoot_half<30)
challenge_one
## How to remove missing observations
surveys %>%
mutate(weight_kg = weight/1000) %>%
select(starts_with("w")) %>%
filter(!is.na(weight)) ## filters out rows in coloumn weight that are not NA. Removing "!" will show you all the NAs
## How to get a summary overview of a dataset
table(surveys$year)
length(table(surveys$year))
range(surveys$year)
summary(surveys)
## Splitting and running calulations on groups
surveys %>%
group_by(year) %>%
summarise(mean_hindfoot_length = mean(hindfoot_length,
na.rm = TRUE))
surveys %>%
filter(!is.na(weight)) %>%
group_by(sex, species_id) %>%
summarise(mean_weight = mean(weight),
min_weight = min(weight),
sd_weight = sd(weight))
surveys %>%
count(sex, species) %>%
print(n = 81)
surveys %>%
count(species, sort = TRUE)
## arrange - used to arrange rows
surveys %>%
count(sex, species) %>%
arrange(species, desc(n))
## CHALLENGE 2 ##
## How many individuals were caught in each plot_type. Answer in 2 ways (using group_by and count)
surveys %>%
count(plot_type)
surveys %>%
group_by(plot_type) %>%
tally()
## CHALLENGE 3 ##
## What is the heaviest animlal mesured in each year?
## Return coloumns year, genus, species_id, and weight. Do not return missing observations
surveys %>%
filter(!is.na(weight)) %>%
group_by(year) %>%
filter(weight == max(weight)) %>%
select(year, genus, species_id, weight) %>%
arrange(desc(weight))
## Keep the species for which there are more than 50 observations
surveys_complete <-
surveys %>%
filter(!is.na(weight),
!is.na(hindfoot_length),
!is.na(sex))
species_counts <- surveys_complete %>%
count(species_id) %>%
filter(n>=50)
## Reduce the surveys_complete object so that it only contains species with at least 50 observations
## (these species are in object species_counts)
surveys_complete <-
surveys_complete %>%
filter(species_id %in% species_counts$species_id)
### How to plot with ggplot ###
# geom_point() is scatter plot
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) + geom_point()
surveys_plot <- ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))
surveys_plot + geom_point()
surveys_complete %>%
count(species_id)
surveys_complete %>%
count(species_id) %>%
filter( n>=50)
surveys_complete %>%
count(species_id) %>%
filter(n >= 1000)
surveys_complete %>%
filter(species_id %in% num_species$species_id)
## Recap
num_species <-
surveys_complete %>%
count(species_id) %>%
filter(n >= 1000)
surveys_complete %>%
filter(species_id %in% num_species$species_id)
animals <-c("pig", "cat", "dog", "donkey", "gorilla", "mouse")
other_animals <-c("zebra", "parrot", "donkey", "cat", "camel")
animals <- c(animals, "zebra", "parrot", "camel")
animals
animals %in% other_animals
? %in%
other_animals %in% animals
intersect(animals, other_animals)
ggplot(data=surveys_complete, mapping = aes(x=weight, y=hindfoot_length)) + geom_point()
ggplot(data=surveys_complete, mapping = aes(x=weight, y=hindfoot_length)) + geom_point(alpha = 0.1)
ggplot(data=surveys_complete, mapping = aes(x=weight, y=hindfoot_length)) + geom_point(alpha = 0.1, colour=blue)
ggplot(data=surveys_complete, mapping = aes(x=weight, y=hindfoot_length)) + geom_point(alpha = 0.1, colour="blue")
ggplot(data=surveys_complete, mapping = aes(x=weight, y=hindfoot_length)) + geom_point(alpha = 0.1, aes(colour=species_id))
ggplot(data=surveys_complete, mapping = aes(x=weight, y=hindfoot_length)) + geom_point(alpha = 0.2, aes(colour=species_id))
ggplot(data=surveys_complete, mapping = aes(x=weight, y=hindfoot_length)) + geom_point(alpha = 0.1, aes(colour=species_id))
+ geom_boxplot()
##geom_boxplot to make boxplot
ggplot(data=surveys_complete, mapping = aes(x=species_id, y=weight))+ geom_boxplot()
##geom_boxplot to make boxplot
ggplot(data=surveys_complete, mapping = aes(x=species_id, y=hindfoot_lenght)) + geom_boxplot()
##geom_boxplot to make boxplot
ggplot(data=surveys_complete, mapping = aes(x=species_id, y=hindfoot_lengh)) + geom_boxplot()
##geom_boxplot to make boxplot
ggplot(data=surveys_complete, mapping = aes(x=species_id, y=hindfoot_length)) + geom_boxplot()
ggplot(data=surveys_complete, mapping = aes(x=species_id, y=hindfoot_length)) + geom_boxplot() + geom_jitter(alpha=0.1,
colour="tomato")
ggplot(data=surveys_complete, mapping = aes(x=species_id, y=hindfoot_length)) + geom_boxplot() + geom_point(alpha=0.1,
colour="tomato")
##
yearly_counts <-
surveys_complete %>%
group_by(year, species_id) %>%
tally()
surveys_complete %>%
group_by(year, species_id)
surveys_complete %>%
group_by(year, species_id) %>%
tally()
yearly_counts
ggplot(data=yearly_counts, mapping = aes(x=year, y=n)) +geom_line()
#add in group variable to tell graph which species
ggplot(data=yearly_counts, mapping = aes(x=year, y=n, group=species_id)) +geom_line()
# Add colour
ggplot(data=yearly_counts, mapping = aes(x=year, y=n, group=species_id)) +geom_line(colour=species_id)
# Add colour
ggplot(data=yearly_counts, mapping = aes(x=year, y=n, group=species_id)) +geom_line(colour=yearly_counts$species_id)
# Add colour
ggplot(data=yearly_counts, mapping = aes(x=year, y=n, group=species_id,colour=species_id)) +geom_line()
# Faceting - splitting display of data into multiple sub groups (splitting last graph into multiple graphs with only one
# species on each)
ggplot(data=yearly_counts, mapping = aes(x=year, y=n, group=species_id,colour=species_id)) +geom_line()+facet_wrap(species_id)
# Faceting - splitting display of data into multiple sub groups (splitting last graph into multiple graphs with only one
# species on each)
ggplot(data=yearly_counts, mapping = aes(x=year, y=n, group=species_id,colour=species_id)) +geom_line()+facet_wrap(data=yearly_counts, species_id)
+facet_wrap(~species_id)
# Faceting - splitting display of data into multiple sub groups (splitting last graph into multiple graphs with only one
# species on each)
ggplot(data=yearly_counts, mapping = aes(x=year, y=n, group=species_id,colour=species_id)) +geom_line()+facet_wrap(~species_id)
## Split by males and females
yearly_sex_counts <-
surveys_complete %>%
group_by(year, species_id, sex) %>%
tally()
yearly_sex_counts
ggplot(data=yearly_sex_counts, mapping = aes(x=year, y=n,
group=species_id,colour=species_id))+geom_line()+facet_wrap(~species_id)
ggplot(data=yearly_sex_counts, mapping = aes(x=year, y=n,
group=species_id,colour=sex))+geom_line()+facet_wrap(~species_id)
## Add title
ggplot(data=yearly_sex_counts, mapping = aes(x=year, y=n,
group=species_id,colour=sex))+geom_line()+facet_wrap(~species_id)+ggtitle("Species counts over time")
ggplot(data=yearly_sex_counts, mapping = aes(x=year, y=n,
group=species_id,colour=sex))+geom_line()+facet_wrap(~species_id)+
labs(title="species counts", x="Year of observation", y="Number of species")
ggplot(data=yearly_sex_counts, mapping = aes(x=year, y=n,
group=species_id,colour=sex))+geom_line()+facet_wrap(~species_id)+
labs(title="species counts", x="Year of observation", y="Number of species")+theme(axis.text.x=element_text(angle=45))
## Save plot
ggsave("data/my_fancy_plot.pdf")
## Save plot
ggsave("my_fancy_plot.pdf")
## Save plot
ggsave("my_fancy_plot.png", width = 15, height = 10, dpi=300)
